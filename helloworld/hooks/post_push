#!/bin/bash
set -e

# Docker Hub client version is: 17.06.2-ee-6
# Use docker-in-docker (18.09.0) in order to use
# experimental features (docker manifest):
docker18()
{ 
  commands="$@"
  echo "Running command: docker18 ${commands}"

  docker run --rm \
  -e DOCKER_CLI_EXPERIMENTAL=enabled \
  -e DOCKER_HOST=unix:///var/run/docker.sock \
  -e DOCKERCFG="${DOCKERCFG}" \
  -e DOCKERCMD="${commands}" \
  -v $(pwd)/.docker/manifests:/root/.docker/manifests \
  -v /var/run/docker.sock:/var/run/docker.sock docker:18.09 sh -c \
    'echo "${DOCKERCFG}" > /root/.docker/config.json && \
    cat /root/.docker/config.json && \
    docker ${DOCKERCMD}'
}

# Read image metadata from labels
VERSION=`docker inspect -f "{{ index .Config.Labels \"org.label-schema.schema-version\" }}" "${IMAGE_NAME}"`

# Parse IMAGE_NAME, as CACHE_TAG is broken on Docker Hub post_push
#IFS=: read CURRENT_REPO CURRENT_TAG <<< $IMAGE_NAME

echo "---------- DEBUG -----------"
echo "Docker Hub environment variables:"
echo "IMAGE_NAME: $IMAGE_NAME"
echo "DOCKER_REPO: $DOCKER_REPO"
echo "DOCKER_TAG: $DOCKER_TAG"
echo "CACHE_TAG: $CACHE_TAG"
echo "Custom variables:"
echo "VERSION: $VERSION"
echo "----------------------------"

ARCH=${DOCKER_TAG}
# Tag and push image for each additional tag
for TAG in {"${ARCH}-latest","${ARCH}-${VERSION}"}; do
  echo "Tag: ${DOCKER_REPO}:${TAG}"
  docker tag "$IMAGE_NAME" "${DOCKER_REPO}:${TAG}"
  docker push "${DOCKER_REPO}:${TAG}"
done


# docker manifest requires image name (without url) as an argument
#IFS='/' read URL USERNAME IMAGE_NAME <<< "$IMAGE_NAME"
#IFS=':' read IMAGE_NAME TAG <<< "$IMAGE_NAME"

# Create manifest list
# TODO: only after building all the tags (?)
# Build a multi-arch manifest
#docker18 manifest create --amend ${USERNAME}/${IMAGE_NAME}:${VERSION} \
#  ${USERNAME}/${IMAGE_NAME}:amd64-${VERSION} ${USERNAME}/${IMAGE_NAME}:arm32v7-${VERSION}
#docker18 manifest create --amend ${USERNAME}/${IMAGE_NAME}:latest \
#  ${USERNAME}/${IMAGE_NAME}:amd64-${VERSION} ${USERNAME}/${IMAGE_NAME}:arm32v7-${VERSION}

#docker18 manifest annotate ${USERNAME}/${IMAGE_NAME}:${VERSION} \
#  ${USERNAME}/${IMAGE_NAME}:amd64-${VERSION} --os linux --arch amd64
#docker18 manifest annotate ${USERNAME}/${IMAGE_NAME}:${VERSION} \
#  ${USERNAME}/${IMAGE_NAME}:arm32v7-${VERSION} --os linux --arch arm --variant 7

#docker18 manifest push ${USERNAME}/${IMAGE_NAME}:${VERSION}
#docker18 manifest push --purge ${USERNAME}/${IMAGE_NAME}:latest

# Docker18 needs a different DOCKERCFG
dpkg -l jq || apt-get install -y jq
DOCKERAUTH=`echo ${DOCKERCFG} | jq '."https://index.docker.io/v1/".auth'`
DOCKERCFG="{ \"auths\": { \"https://index.docker.io/v1/\": { \"auth\": "${DOCKERAUTH}" } } }"

### Test docker18 manifest
docker18 manifest create xezpeleta/helloworld:latest xezpeleta/helloworld:amd64-latest xezpeleta/helloworld:arm32v7-latest
docker18 manifest annotate xezpeleta/helloworld:latest xezpeleta/helloworld:amd64-latest --os linux --arch amd64
docker18 manifest annotate xezpeleta/helloworld:latest xezpeleta/helloworld:arm32v7-latest --os linux --arch arm --variant 7
docker18 manifest push xezpeleta/helloworld:latest